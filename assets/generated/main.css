/* ==========================================================================
   Normalize.scss settings
   ========================================================================== */
/**
 * Includes legacy browser support IE6/7
 *
 * Set to false if you want to drop support for IE6 and IE7
 */
/* Base
   ========================================================================== */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom.
 * 3. Corrects text resizing oddly in IE 6/7 when body `font-size` is set using
 *  `em` units.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
}

/**
 * Remove default margin.
 */
body {
  margin: 0;
}

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block;
}

/**
 * 1. Correct `inline-block` display not defined in IE 6/7/8/9 and Firefox 3.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */
}

/**
 * Prevents modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0;
}

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none;
}

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent;
}

/**
 * Improve readability of focused elements when they are also in an
 * active/hover state.
 */
a:active, a:hover {
  outline: 0;
}

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted;
}

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold;
}

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic;
}

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/**
 * Addresses styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000;
}

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sup {
  top: -0.5em;
}

sub {
  bottom: -0.25em;
}

/* Embedded content
   ========================================================================== */
/**
 * 1. Remove border when inside `a` element in IE 8/9/10.
 * 2. Improves image quality when scaled in IE 7.
 */
img {
  border: 0;
}

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden;
}

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px;
}

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0;
}

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto;
}

/**
 * Address odd `em`-unit font size rendering in all browsers.
 * Correct font family set oddly in IE 6, Safari 4/5, and Chrome.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em;
}

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *  Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 * 4. Improves appearance and consistency in all browsers.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */
}

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible;
}

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none;
}

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *  and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *  `input` and others.
 * 4. Removes inner spacing in IE 7 without affecting normal text inputs.
 *  Known issue: inner spacing remains in IE 6.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */
}

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default;
}

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal;
}

/**
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 *  Known issue: excess padding remains in IE 6.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  box-sizing: content-box;
  /* 2 */
}

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 * 3. Corrects text not wrapping in Firefox 3.
 * 4. Corrects alignment displayed oddly in IE 6/7.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto;
}

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold;
}

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0;
}

td,
th {
  padding: 0;
}

h1, h2, h3, p {
  margin-top: 0;
  margin-bottom: 0;
}

.faq__container {
  max-width: 960px;
  overflow: hidden;
  background-color: #f8f8f8;
  height: 100%;
}

.faq footer {
  margin-top: 10px;
  position: fixed;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 10;
  max-width: 960px;
}

@media (max-height: 500px) {
  .faq footer {
    position: static;
  }
}

.faq__accordion {
  max-height: 400px;
  transition: max-height 300ms ease 150ms, opacity 300ms ease 150ms;
  opacity: 0;
  -ms-flex-positive: 0;
  flex-grow: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.faq__accordion.active {
  max-height: initial;
  max-height: auto;
  opacity: 1;
}

.faq__accordion-content {
  max-height: 0;
  opacity: 0;
  display: block;
  transition: all 300ms ease;
  -ms-user-select: none;
  user-select: none;
  border-top: 1px solid #efefef;
  color: #77726b;
  font-size: 14px;
  padding-right: 20px;
  padding-left: 20px;
}

.faq__accordion-header {
  display: -ms-flexbox;
  display: flex;
  -ms-flex-pack: justify;
  justify-content: space-between;
  -ms-flex-align: center;
  align-items: center;
  height: 40px;
  cursor: pointer;
  padding-right: 20px;
  padding-left: 20px;
}

.faq__accordion-arrow {
  display: inline-block;
  transition: transform 300ms ease;
}

.faq__accordion-arrow i {
  color: #acacac;
  transition: color 300ms ease;
  font-size: 12px;
}

.faq__accordion-label {
  font-size: 13px;
  text-transform: uppercase;
  font-weight: normal;
  -ms-user-select: none;
  user-select: none;
}

.faq__accordion-panel {
  border-top: 1px solid #efefef;
  border-bottom: 1px solid #efefef;
  background-color: #ffffff;
  padding-top: 5px;
  padding-right: 0;
  padding-left: 0;
  transition: border 300ms ease, background-color 300ms ease;
}

.faq__accordion-panel.active {
  background-color: #fff7ec;
  border-top: 1px solid #ff850b;
  border-bottom: 1px solid #ff850b;
}

.faq__accordion-panel.active .faq__accordion-arrow {
  transform: rotate(180deg);
}

.faq__accordion-panel.active .faq__accordion-arrow i {
  color: #ff850b;
}

.faq__accordion-panel.active .faq__accordion-content {
  max-height: 200px;
  opacity: 1;
  -ms-user-select: auto;
  user-select: auto;
  padding-top: 10px;
  padding-bottom: 10px;
}

.faq article {
  display: -ms-flexbox;
  display: flex;
  -ms-flex-pack: center;
  justify-content: center;
  transition: transform 300ms ease 150ms;
  background-color: white;
}

.faq header {
  position: relative;
}

.faq__slider {
  position: relative;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-pack: center;
  justify-content: center;
  padding: 10px;
  height: 92px;
  width: auto;
  background-color: #f8f8f8;
}

.faq__slider-image {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  transition: opacity 300ms ease, visibility 300ms ease;
  color: #474747;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  height: auto;
  width: 41px;
}

.faq__slider-image:first-of-type {
  opacity: 0;
  visibility: hidden;
}

.faq__slider-image:last-of-type {
  opacity: 1;
  visibility: visible;
}

.faq__slider-image.circle {
  height: auto;
  width: 53.3px;
  margin-top: 2px;
}

.faq__slider-image.phone {
  height: auto;
  width: 32.8px;
  margin-top: 1px;
}

.faq__slider-image.note {
  margin-left: 4px;
  margin-top: 2px;
  height: auto;
  width: 45.1px;
}

.faq__slider-image.hand--hi {
  height: auto;
  width: 36.9px;
}

.faq__slider-image.hand--currency {
  height: auto;
  width: 49.2px;
  margin-right: 1px;
  margin-top: -2px;
}

.faq__slider-image.data {
  height: auto;
  width: 49.2px;
}

.faq__slider-item {
  height: 82px;
  width: 82px;
  border-radius: 50%;
  padding: 5px;
  -ms-flex: 0 0 82px;
  flex: 0 0 82px;
  position: absolute;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-pack: center;
  justify-content: center;
  -ms-flex-align: center;
  align-items: center;
  transition: all 300ms ease;
  background-color: white;
  cursor: pointer;
  -ms-user-select: none;
  user-select: none;
  box-shadow: 0px 0px 10px 1px rgba(217, 217, 217, 0.5);
}

.faq__slider-item:nth-child(2) {
  transform: translateX(115%);
}

.faq__slider-item:nth-child(3) {
  transform: translateX(230%);
}

.faq__slider-item:nth-child(4) {
  transform: translateX(345%);
}

.faq__slider-item:nth-child(5) {
  transform: translateX(460%);
}

.faq__slider-item:nth-child(6) {
  transform: translateX(575%);
}

.faq__slider-item:nth-child(7) {
  transform: translateX(690%);
}

.faq__slider-item:nth-child(8) {
  transform: translateX(805%);
}

.faq__slider-item:nth-child(9) {
  transform: translateX(920%);
}

.faq__slider-item:nth-child(10) {
  transform: translateX(1035%);
}

.faq__slider-item.active {
  background-color: #ff850b;
  transform: translateX(0) scale(1.13);
  transform-origin: center top;
  box-shadow: 0px 0px 10px 2px rgba(255, 133, 11, 0.5);
}

.faq__slider-item.active .faq__slider-image:first-of-type {
  opacity: 1;
  visibility: visible;
}

.faq__slider-item.active .faq__slider-image:last-of-type {
  opacity: 0;
  visibility: hidden;
}

.faq__title {
  text-align: center;
  line-height: 1;
  transition: all 300ms ease;
  margin-bottom: 10px;
  -ms-flex-positive: 0;
  flex-grow: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.faq__title h2 {
  font-size: 14px;
  font-weight: normal;
  text-transform: uppercase;
}

.faq__titles {
  height: 40px;
  width: auto;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-pack: center;
  justify-content: center;
  -ms-flex-align: end;
  align-items: flex-end;
  transition: transform 300ms ease 75ms;
  background-color: white;
  border-bottom: 1px solid #efefef;
}

.faq__btn {
  display: -ms-flexbox;
  display: flex;
  -ms-flex-pack: center;
  justify-content: center;
  -ms-flex-align: center;
  align-items: center;
  height: 40px;
  text-decoration: none;
  color: black;
  border: 1px solid #efefef;
  background-color: white;
  transition: background-color 300ms ease;
}

.faq__btn i {
  margin-right: 10px;
}

.faq__btn i.fa-volume-control-phone {
  transform: rotate(-30deg);
  transition: transform 300ms ease;
}

.faq__btn:hover {
  background-color: #f8f8f8;
}

.faq__btn:hover i.fa-volume-control-phone {
  transform: rotate(-15deg);
}

.faq__app {
  position: relative;
  height: 30px;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-pack: center;
  justify-content: center;
  -ms-flex-align: center;
  align-items: center;
  background-color: white;
}

.faq__app .faq__app-back {
  position: absolute;
  top: 50%;
  left: 5px;
  font-size: 14px;
  margin-top: -6px;
  color: #acacac;
  padding: 2px;
}

.faq__app h1 {
  text-align: center;
  margin-top: 0;
  margin-bottom: 0;
  font-size: 15px;
  font-weight: normal;
  color: #474747;
  text-transform: uppercase;
}

.faq__dip {
  display: -ms-flexbox;
  display: flex;
  margin-top: -18px;
  position: relative;
  overflow: visible;
}

.faq__dip-side {
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  background-color: white;
  border-top: 1px solid #ff850b;
}

.faq__dip-circle {
  -ms-flex: 0 0 100px;
  flex: 0 0 100px;
  max-width: 100px;
  width: 100%;
  height: auto;
}

.faq__dip-circle img {
  display: block;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
